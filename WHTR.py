#!/usr/bin/env python
# -*- coding: CP1251 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Thu Dec 25 20:52:26 2014
#
#V.Nesterov WHTR
from Arduino import Arduino
import datetime
import time
import wx
import gettext
import math
import os

class Arduino(Arduino):
    """ Extended the python-arduino library by addind DHT support."""

    def dhtRead(self, pin=None, model=11):
        """ Read humidity and temperature from a DHT sensor."""
        cmd_str = "@{cmd}%{pin}%{model}$!".format(cmd="dht", pin=pin, model=model)
        try:
            self.sr.write(cmd_str)
            self.sr.flush()
        except:
            pass
        rd = self.sr.readline().replace("\r\n", "")
        return rd

    def irRead(self):
        """ Read ir signal from a IR receiver sensor."""
        cmd_str = "@{cmd}%$!".format(cmd="irrecv")
        try:
            self.sr.write(cmd_str)
            self.sr.flush()
        except:
            pass
        rd = self.sr.readline().replace("\r\n", "")
        return rd

board = Arduino("921600", "/dev/ttyACM0") #Initialising Mega Arduino

time.sleep(1)
#setting up pins for each motor's (4x4) speed (_sp) and direction (_pwm) 
rx = 24;
ry = 25;
lx = 22;
ly = 23;
rsp = 3;
lsp = 2;

#setting up relay switch pins
sw_mot = 52;
sw_1 = 53;
sw_2 = 50;
sw_3 = 51;

#define pin Mode Engines
board.pinMode(rx, "OUTPUT")
board.pinMode(ry, "OUTPUT")
board.pinMode(lx, "OUTPUT")
board.pinMode(ly, "OUTPUT")
board.pinMode(rsp, "OUTPUT")
board.pinMode(lsp, "OUTPUT")

#Speed of Left wheels
def SL(pwl):
    board.analogWrite(lsp, pwl);
   
#Speed of Right wheels
def SR(pwr):
    board.analogWrite(rsp, pwr);

#Left wheels Forward
def DLF():
    board.digitalWrite(lx, "HIGH")
    board.digitalWrite(ly, "LOW")

#Left wheels Backward
def DLB():
    board.digitalWrite(lx, "LOW")
    board.digitalWrite(ly, "HIGH")
    
#Right wheels Forward
def DRF():
    board.digitalWrite(rx, "HIGH")
    board.digitalWrite(ry, "LOW")

#Right wheels Backward
def DRB():
    board.digitalWrite(rx, "LOW")
    board.digitalWrite(ry, "HIGH")

#stop right engines
def stopR():
    board.digitalWrite(rx, "LOW")
    board.digitalWrite(ry, "LOW")

#stop left engines
def stopL():
    board.digitalWrite(lx, "LOW")
    board.digitalWrite(ly, "LOW")

#Relay switches
def motor_switch(switchm):
    board.pinMode(sw_mot, "OUTPUT")
    board.digitalWrite(sw_mot, switchm)

def block1_switch(switch1):
    board.pinMode(sw_1, "OUTPUT")
    board.digitalWrite(sw_1, switch1)

def block2_switch(switch2):
    board.pinMode(sw_2, "OUTPUT")
    board.digitalWrite(sw_2, switch2)

def block3_switch(switch3):
    board.pinMode(sw_3, "OUTPUT")
    board.digitalWrite(sw_3, switch3)

def motorfun(en): #not implemented
    Uboard.pinMode(fun, "OUTPUT")
    Uboard.digitalWrite(fun, en)

#GUI Code    
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_cam = wx.Panel(self, wx.ID_ANY)
        self.button_IR = wx.ToggleButton(self, wx.ID_ANY, _("IR"))
        self.button_navi = wx.Button(self, wx.ID_ANY, _("Navi"))
        self.button_cam = wx.Button(self, wx.ID_ANY, _("Camera"))
        self.button_reb = wx.Button(self, wx.ID_ANY, _("Reboot"))
        self.button_down = wx.Button(self, wx.ID_ANY, _("Shutdown"))
        self.slider_speed = wx.Slider(self, wx.ID_ANY, 50, 0, 200, style=wx.SL_VERTICAL | wx.SL_AUTOTICKS | wx.SL_INVERSE)
        self.sizer_slider_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Set Speed"))
        self.label_status = wx.StaticText(self, wx.ID_ANY, _("SET SPEED"), style=wx.ALIGN_CENTRE | wx.ST_NO_AUTORESIZE)
        self.sizer_status_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Status message"))
        self.button_start = wx.Button(self, wx.ID_ANY, _("START"))
        self.sizer_engine_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Engine"))
        self.button_e_stop = wx.Button(self, wx.ID_ANY, _("EMERGENCY STOP"))
        self.label_sign = wx.StaticText(self, wx.ID_ANY, _("---"))
        self.sizer_signal_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Signal"))
        self.label_batt = wx.StaticText(self, wx.ID_ANY, _("---"))
        self.sizer_battery_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Battery"))
        self.label_temp = wx.StaticText(self, wx.ID_ANY, _("---"))
        self.sizer_temper_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Temp"))
        self.label_hum = wx.StaticText(self, wx.ID_ANY, _("---"))
        self.sizer_humid_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Humid"))
        self.label_time = wx.StaticText(self, wx.ID_ANY, _("---"))
        self.sizer_time_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Time"))
        self.button_setts = wx.Button(self, wx.ID_ANY, _("Setup"))
        self.sizer_settings_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Settings"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_IR, self.button_IR)
        self.Bind(wx.EVT_BUTTON, self.go_Navi, self.button_navi)
        self.Bind(wx.EVT_BUTTON, self.go_Cam, self.button_cam)
        self.Bind(wx.EVT_BUTTON, self.def_reboot, self.button_reb)
        self.Bind(wx.EVT_BUTTON, self.def_Off, self.button_down)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.slide_release, self.slider_speed)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, self.slide_track, self.slider_speed)
        self.Bind(wx.EVT_BUTTON, self.def_Start, self.button_start)
        self.Bind(wx.EVT_BUTTON, self.def_Stop, self.button_e_stop)
        self.Bind(wx.EVT_BUTTON, self.go_setts, self.button_setts)
        self.button_start.Bind(wx.EVT_KEY_UP, self.onKeyRelease)
        self.button_start.Bind(wx.EVT_KEY_DOWN, self.onKeyPress)
        self.time_update()
        #self.temp_update()
        self.get_ir()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("WHTR"))
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/home/linaro/WHTR/WHTR.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((384, 540))
        self.panel_cam.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_status.SetBackgroundColour(wx.Colour(1, 10, 0))
        self.label_status.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_sign.SetBackgroundColour(wx.Colour(0, 14, 0))
        self.label_sign.SetForegroundColour(wx.Colour(0, 0, 255))
        self.label_batt.SetBackgroundColour(wx.Colour(0, 14, 0))
        self.label_batt.SetForegroundColour(wx.Colour(255, 255, 0))
        self.label_temp.SetBackgroundColour(wx.Colour(0, 14, 0))
        self.label_temp.SetForegroundColour(wx.Colour(255, 127, 0))
        self.label_hum.SetBackgroundColour(wx.Colour(0, 14, 0))
        self.label_hum.SetForegroundColour(wx.Colour(255, 0, 255))
        self.label_time.SetBackgroundColour(wx.Colour(0, 14, 0))
        self.label_time.SetForegroundColour(wx.Colour(0, 255, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_base = wx.BoxSizer(wx.VERTICAL)
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_controls = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_displays = wx.GridSizer(3, 2, 0, 0)
        self.sizer_settings_staticbox.Lower()
        sizer_settings = wx.StaticBoxSizer(self.sizer_settings_staticbox, wx.VERTICAL)
        self.sizer_time_staticbox.Lower()
        sizer_time = wx.StaticBoxSizer(self.sizer_time_staticbox, wx.VERTICAL)
        self.sizer_humid_staticbox.Lower()
        sizer_humid = wx.StaticBoxSizer(self.sizer_humid_staticbox, wx.VERTICAL)
        self.sizer_temper_staticbox.Lower()
        sizer_temper = wx.StaticBoxSizer(self.sizer_temper_staticbox, wx.VERTICAL)
        self.sizer_battery_staticbox.Lower()
        sizer_battery = wx.StaticBoxSizer(self.sizer_battery_staticbox, wx.VERTICAL)
        self.sizer_signal_staticbox.Lower()
        sizer_signal = wx.StaticBoxSizer(self.sizer_signal_staticbox, wx.VERTICAL)
        sizer_central = wx.BoxSizer(wx.VERTICAL)
        sizer_emergency = wx.BoxSizer(wx.VERTICAL)
        self.sizer_engine_staticbox.Lower()
        sizer_engine = wx.StaticBoxSizer(self.sizer_engine_staticbox, wx.VERTICAL)
        self.sizer_status_staticbox.Lower()
        sizer_status = wx.StaticBoxSizer(self.sizer_status_staticbox, wx.VERTICAL)
        sizer_left_side = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_slider_staticbox.Lower()
        sizer_slider = wx.StaticBoxSizer(self.sizer_slider_staticbox, wx.VERTICAL)
        sizer_buttons = wx.BoxSizer(wx.VERTICAL)
        sizer_down = wx.BoxSizer(wx.VERTICAL)
        sizer_reboot = wx.BoxSizer(wx.VERTICAL)
        sizer_terminal = wx.BoxSizer(wx.VERTICAL)
        sizer_buttons_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_sensor = wx.BoxSizer(wx.VERTICAL)
        sizer_cam = wx.BoxSizer(wx.VERTICAL)
        sizer_cam.Add(self.panel_cam, 1, wx.EXPAND, 0)
        sizer_main.Add(sizer_cam, 1, wx.ALL | wx.EXPAND, 3)
        sizer_buttons.Add(self.button_IR, 1, wx.EXPAND, 0)
        sizer_sensor.Add(self.button_navi, 1, wx.EXPAND, 0)
        sizer_buttons_2.Add(sizer_sensor, 1, wx.EXPAND, 0)
        sizer_buttons.Add(sizer_buttons_2, 1, wx.EXPAND, 0)
        sizer_terminal.Add(self.button_cam, 1, wx.EXPAND, 0)
        sizer_buttons.Add(sizer_terminal, 1, wx.EXPAND, 0)
        sizer_reboot.Add(self.button_reb, 1, wx.EXPAND, 0)
        sizer_buttons.Add(sizer_reboot, 1, wx.EXPAND, 0)
        sizer_down.Add(self.button_down, 1, wx.EXPAND, 0)
        sizer_buttons.Add(sizer_down, 1, wx.EXPAND, 0)
        sizer_left_side.Add(sizer_buttons, 1, wx.EXPAND, 0)
        sizer_slider.Add(self.slider_speed, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_left_side.Add(sizer_slider, 1, wx.EXPAND, 0)
        sizer_controls.Add(sizer_left_side, 1, wx.EXPAND, 0)
        sizer_status.Add(self.label_status, 1, wx.ALL | wx.EXPAND, 0)
        sizer_central.Add(sizer_status, 1, wx.EXPAND, 0)
        sizer_engine.Add(self.button_start, 1, wx.EXPAND, 0)
        sizer_central.Add(sizer_engine, 1, wx.EXPAND, 0)
        sizer_emergency.Add(self.button_e_stop, 1, wx.EXPAND, 0)
        sizer_central.Add(sizer_emergency, 1, wx.EXPAND, 0)
        sizer_controls.Add(sizer_central, 1, wx.EXPAND, 0)
        sizer_signal.Add(self.label_sign, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_signal, 1, wx.EXPAND, 0)
        sizer_battery.Add(self.label_batt, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_battery, 1, wx.EXPAND, 0)
        sizer_temper.Add(self.label_temp, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_temper, 1, wx.EXPAND, 0)
        sizer_humid.Add(self.label_hum, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_humid, 1, wx.EXPAND, 0)
        sizer_time.Add(self.label_time, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_time, 1, wx.EXPAND, 0)
        sizer_settings.Add(self.button_setts, 1, wx.EXPAND, 0)
        grid_sizer_displays.Add(sizer_settings, 1, wx.EXPAND, 0)
        sizer_controls.Add(grid_sizer_displays, 1, wx.EXPAND, 0)
        sizer_main.Add(sizer_controls, 1, wx.EXPAND, 0)
        sizer_base.Add(sizer_main, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_base)
        self.Layout()
        # end wxGlade

    #setting up and display time
    def time_update(self):
        now = datetime.datetime.now()
        tm = datetime.time(now.hour, now.minute, now.second)
        self.label_time.SetLabel(str(tm))
        wx.CallLater(1000, self.time_update)
        
    #display temperature and humidity with DHT 11 sensor on digital pin 7
    """def temp_update(self):
        dht_read = board.dhtRead(27, 11)
        data = dht_read.split()
        humidity = data[0]
        temperature = data[1]
        self.label_temp.SetLabel(str(temperature))
        self.label_hum.SetLabel(str(humidity))
        wx.CallLater(1000, self.temp_update)"""
        
    #get data from ir receiver
    def get_ir(self):
        ir_read = str(board.irRead())
        if ir_read == "20DF10EF":
            os.system("init 0")
        else:
            self.label_status.SetLabel(str(ir_read))
        wx.CallLater(1000, self.get_ir)
        
    #other functions for GUI
    def on_IR(self, event):  # wxGlade: MyFrame.<event_handler>
        block1_switch("LOW")
        event.Skip()

    def go_Cam(self, event):  # wxGlade: MyFrame.<event_handler>
        block3_switch("LOW")
        event.Skip()

    def go_Navi(self, event):  # wxGlade: MyFrame.<event_handler>
        block2_switch("LOW")
        event.Skip()

    def def_reboot(self, event):  # wxGlade: MyFrame.<event_handler>
        os.system("reboot")
        event.Skip()

    def def_Off(self, event):  # wxGlade: MyFrame.<event_handler>
        motor_switch("HIGH")
        block1_switch("HIGH")
        block2_switch("HIGH")
        block3_switch("HIGH")
        time.sleep(0.5)
        os.system("init 0")
        event.Skip()

    def slide_release(self, event):  # wxGlade: MyFrame.<event_handler>
        motor_switch("LOW")
        #board.digitalWrite(sw_mot, "LOW")
        self.label_status.SetLabel("PRESS START")
        self.button_start.SetFocus()
        event.Skip()

    def slide_track(self, event):  # wxGlade: MyFrame.<event_handler>
        Tor = float(self.slider_speed.GetValue())
        Spd = str(Tor)
        self.label_status.SetLabel(Spd)
        event.Skip()

    def def_Start(self, event):  # wxGlade: MyFrame.<event_handler>
        self.label_status.SetLabel("USE KEYBOARD ARROWS")
        motor_switch("LOW")
        self.label_status.Layout()
        event.Skip()
        #put code below to the end of def __init___
        #self.button_start.Bind(wx.EVT_KEY_UP, self.onKeyRelease)
        #self.button_start.Bind(wx.EVT_KEY_DOWN, self.onKeyPress)
        
    def def_Stop(self, event):  # wxGlade: MyFrame.<event_handler>
        motor_switch("HIGH")
        block1_switch("HIGH")
        block2_switch("HIGH")
        block3_switch("HIGH")
        self.label_status.SetLabel("All switches CUT OFF")
        event.Skip()

    def go_setts(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler 'go_setts' not implemented!"
        event.Skip()

    def onKeyPress(self, event):
        keycode_pr = event.GetKeyCode()
        Keypr = str(keycode_pr)
        if keycode_pr == wx.WXK_UP:
            Tor = float(self.slider_speed.GetValue())
            DLF()
            DRF()
            PWM_val = Tor + 50 
            SL(PWM_val)
            SR(PWM_val)
            self.label_status.SetLabel("Going FORWARD")
        elif keycode_pr == wx.WXK_DOWN:
            Tor = float(self.slider_speed.GetValue())
            DLB()
            DRB()
            PWM_val = Tor + 50 
            SL(PWM_val)
            SR(PWM_val)
            self.label_status.SetLabel("Going BACKWARD")
        elif keycode_pr == wx.WXK_RIGHT:
            DLF()
            DRB()
            SL(200)
            SR(200)
            self.label_status.SetLabel("Turning RIGHT")
        elif keycode_pr == wx.WXK_LEFT:
            DLB()
            DRF()
            SL(200)
            SR(200)
            self.label_status.SetLabel("Turning LEFT")
        event.Skip()

    def onKeyRelease(self, event):
        keycode_rl = event.GetKeyCode()
        if keycode_rl == wx.WXK_UP:
            stopR()
            stopL()
            self.label_status.SetLabel("Stopped")
        elif keycode_rl == wx.WXK_DOWN:
            stopR()
            stopL()
            self.label_status.SetLabel("Stopped")
        elif keycode_rl == wx.WXK_RIGHT:
            stopR()
            stopL()
            self.label_status.SetLabel("Stopped")
        elif keycode_rl == wx.WXK_LEFT:
            stopR()
            stopL()
            self.label_status.SetLabel("Stopped")
        event.Skip()    

# end of class MyFrame
if __name__ == "__main__":
    gettext.install("WHTR") # replace with the appropriate catalog name
    
    WHTR = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_main = MyFrame(None, wx.ID_ANY, "")
    WHTR.SetTopWindow(frame_main)
    frame_main.Show()
    WHTR.MainLoop()
